
@{
    ViewBag.Title = "Batik";
}

<h2>Batik</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-group">
            <label for="Griege" class="control-label col-md-2">ผ้าดิบ</label>
            <div class="col-md-2">
                <input type="number" name="Griege" class="form-control" data-bind="textInput: Griege">
            </div>
        </div>
        <div class="form-group">
            <label for="Grain" class="control-label col-md-2">การยืดหด</label>
            <div class="col-md-2">
                <div class="btn-group" data-toggle="buttons">
                    <label class="btn btn-default active">
                        <input type="radio" name="GrainType" value="Stretch" data-bind="bsChecked: GrainType" checked>
                        ยืด
                    </label>
                    <label class="btn btn-default">
                        <input type="radio" name="GrainType" value="Shrink" data-bind="bsChecked: GrainType">
                        หด
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2 col-lg-offset-2">
                <div class="input-group">
                    <input type="number" name="Grain" class="form-control" data-bind="textInput: Grain">
                    <div class="input-group-addon">%</div>
                </div>
                <p class="form-control-static">
                    <span data-bind="text: GrainCompute()"></span> บาท/หลา
                </p>
            </div>
        </div>
        <div class="form-group">
            <label for="BleachingCost" class="control-label col-md-2">ค่าฟอก</label>
            <div class="col-md-2">
                <input type="number" name="BleachingCost" class="form-control" data-bind="textInput: BleachingCost">
                <p class="form-control-static">
                    <span data-bind="text: BleachingCostCompute()"></span> บาท/หลา
                </p>
            </div>
        </div>
        <div class="form-group">
            <label for="PrintingCost" class="control-label col-md-2">ค่าพิมพ์</label>
            <div class="col-md-2">
                <input type="number" name="PrintingCost" class="form-control" data-bind="textInput: PrintingCost">
                <p class="form-control-static">
                    <span data-bind="text: PrintingCostCompute()"></span> บาท/หลา
                </p>
            </div>
        </div>
        <div class="form-group">
            <label for="Amount" class="control-label col-md-2">กุลี</label>
            <div class="col-md-4">
                <div class="btn-group" data-toggle="buttons">
                    <label class="btn btn-default active">
                        <input type="radio" name="Amount" value="40" autocomplete="off" checked data-bind="bsChecked: Amount">
                        2Y
                    </label>
                    <label class="btn btn-default">
                        <input type="radio" name="Amount" value="44.44" autocomplete="off" data-bind="bsChecked: Amount">
                        2M
                    </label>
                    <label class="btn btn-default">
                        <input type="radio" name="Amount" value="60" autocomplete="off" data-bind="bsChecked: Amount">
                        3Y
                    </label>
                    <label class="btn btn-default">
                        <input type="radio" name="Amount" value="66.66" autocomplete="off" data-bind="bsChecked: Amount">
                        3M
                    </label>
                </div>
                <p class="form-control-static">
                    <span data-bind="text: AmountCompute()"></span> บาท/กุลี
                </p>
            </div>
        </div>
        <div class="form-group">
            <label for="Package" class="control-label col-md-2">ถุงตรา</label>
            <div class="col-md-4">
                <div class="btn-group" data-toggle="buttons">
                    <label class="btn btn-default active">
                        <input type="radio" name="Package" value="30" autocomplete="off" checked data-bind="bsChecked: Package">
                        +30
                    </label>
                    <label class="btn btn-default">
                        <input type="radio" name="Package" value="40" autocomplete="off" data-bind="bsChecked: Package">
                        +40
                    </label>
                    <label class="btn btn-default">
                        <input type="radio" name="Package" value="50" autocomplete="off" data-bind="bsChecked: Package">
                        +50
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">ผลลัพธ์</label>
            <div class="col-md-2">
                <p class="form-control-static">
                    <span data-bind="text: ResultCompute()"></span>
                </p>
            </div>
        </div>
    </div>
}

@section scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/mathjs")
    <script>
        ko.bindingHandlers.bsChecked = {
            init: function (element, valueAccessor, allBindingsAccessor,
            viewModel, bindingContext) {
                var value = valueAccessor();
                var newValueAccessor = function () {
                    return {
                        change: function () {
                            value(element.value);
                        }
                    }
                };
                ko.bindingHandlers.event.init(element, newValueAccessor,
                allBindingsAccessor, viewModel, bindingContext);
            },
            update: function (element, valueAccessor, allBindingsAccessor,
            viewModel, bindingContext) {
                if ($(element).val() == ko.unwrap(valueAccessor())) {
                    setTimeout(function () {
                        $(element).closest('.btn').button('toggle');
                    }, 1);
                }
            }
        }

        function BatikViewModel() {
            var self = this;
            self.Griege = ko.observable(0);
            self.GrainType = ko.observable("Stretch");
            self.Grain = ko.observable(0);
            self.BleachingCost = ko.observable(0);
            self.PrintingCost = ko.observable(0);
            self.Amount = ko.observable(40);
            self.Package = ko.observable(30);
            self.GrainCompute = ko.computed(function () {
                return math.chain(self.Griege())
                    .multiply(1.00 + (self.GrainType() == "Stretch" ? -1 : 1) * self.Grain() / 100);
            });
            self.BleachingCostCompute = ko.computed(function () {
                return math.chain(self.GrainCompute())
                    .add(self.BleachingCost());
            });
            self.PrintingCostCompute = ko.computed(function () {
                return math.chain(self.BleachingCostCompute())
                    .add(self.PrintingCost());
            });
            self.AmountCompute = ko.computed(function () {
                return math.chain(self.PrintingCostCompute())
                    .multiply(self.Amount());
            });
            self.PackageCompute = ko.computed(function () {
                return math.chain(self.AmountCompute())
                    .add(self.Package());
            });
            self.ResultCompute = ko.computed(function () {
                return self.PackageCompute();
            });
        }

        ko.applyBindings(new BatikViewModel());
    </script>
}