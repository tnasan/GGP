@using GGP.Models.Customer
@model Customer
@{
    ViewBag.Title = "Create Customer";
}
<h2>แก้ไขลูกค้า</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Customer</h4>
        <hr>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, "ชื่อ", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TelephoneNumber, "โทร", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.TelephoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TelephoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FaxNumber, "แฟกซ์", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.FaxNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FaxNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, "อีเมล", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WebsiteUrl, "เวบไซต์", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.WebsiteUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WebsiteUrl, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Address, "ที่อยู่", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Address, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>
        <div data-bind="foreach: contacts">
            <div class="form-group">
                <label class="control-label col-md-1">ผู้ติดต่อ <span data-bind="text: $index() + 1"></span></label>
                <div class="col-md-2">
                    <input type="text" class="form-control" placeholder="ชื่อ" data-bind="textInput: name, attr: { id: 'Contacts_' + $index() + '_Name', name: 'Contacts[' +  $index() + '].Name', required: $index() + 1 != $root.contacts().length }, event: { keyup: $root.addContact }">
                </div>
                <div class="col-md-2">
                    <input type="tel" class="form-control" placeholder="โทร" data-bind="textInput: telephoneNumber, attr: { name: 'Contacts[' + $index() + '].TelephoneNumber' }">
                </div>
                <div class="col-md-2">
                    <input type="email" class="form-control" placeholder="อีเมล" data-bind="textInput: email, attr: { name: 'Contacts[' + $index() + '].Email' }">
                </div>
                <div class="col-md-1">
                    <button type="button" class="btn btn-default" data-bind="enable: $root.contacts().length > 1, click: $root.removeContact"><span class="glyphicon glyphicon-trash"></span></button>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-1 col-md-10">
                <button type="submit" class="btn btn-default">แก้ไขลูกค้า</button>
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")
    <script>
        function CreateCustomerViewModel() {
            var self = this;

            self.contacts = ko.observableArray([
                    @Html.Raw(String.Join(",", Model.Contacts.Union(new Contact[] { new Contact() }).Select(x => "{ name: \"" + x.Name + "\", telephoneNumber: \"" + x.TelephoneNumber + "\", email: \"" + x.Email + "\" }")))
            ]);

            self.validate = function () {
                $("form").data("validator", null);
                $("form").data("unobtrusiveValidation", null);
                $.validator.unobtrusive.parse($("form"));
            };

            self.addContact = function () {
                var isEmptyNameExists = false;
                for (var i = 0; i < self.contacts().length; i++) {
                    if (!self.contacts()[i].name || self.contacts()[i].name.trim() == "") {
                        isEmptyNameExists = true;
                        break;
                    }
                }

                if (!isEmptyNameExists) {
                    self.contacts.push({
                        name: "",
                        telephoneNumber: "",
                        email: ""
                    });
                }
            };

            self.removeContact = function () {
                self.contacts.remove(this);
            }
        }

        ko.applyBindings(new CreateCustomerViewModel());
    </script>
}